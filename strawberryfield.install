<?php
/**
 * @file
 * Contains install and update functions for strawberryfield.
 */

use Drupal\Core\Language\LanguageInterface;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_install().
 */

function strawberryfield_install() {
  $vid = "strawberryfield_voc_id";
  $name = "Strawberryfield Metadata Keys";
  $vocabularies = Vocabulary::loadMultiple();
  if (!isset($vocabularies[$vid])) {
    // Create a vocabulary to hold strawberryfield json keys.
    $vocabulary = Vocabulary::create([
      'name' => $name,
      'description' => 'Holds Strawberry Field provided JSON Keys. Populated automatically on node save.',
      'vid' => $vid,
      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
      'weight' => 0,
    ]);
    $vocabulary->save();
    // Add a translatable field to the vocabulary.
    $fieldstorage = FieldStorageConfig::create(array(
      'field_name' => 'field_jsonpath',
      'entity_type' => 'taxonomy_term',
      'type' => 'text',
    ));
    $fieldstorage->save();

    $field = FieldConfig::create(['field_storage' => $fieldstorage, 'bundle' => $vid]);
    $field->save();
  }
}

/**
 * Adds entity_type default to entity reference strawberry keynameprovider.
 */
function strawberryfield_update_9101() {
  $config_factory = \Drupal::configFactory();
  // Find strawberry_keynameprovider configs that are using the entity jmespath
  // provider and have no entity type set yet.
  foreach ($config_factory->listAll('strawberryfield.strawberry_keynameprovider.') as $keynameprovider_name) {
    $keynameprovider = $config_factory->getEditable($keynameprovider_name);
    if ($keynameprovider->get('pluginid') == 'entityjmespath' && $keynameprovider->get('pluginconfig.entity_type') == NULL) {
      $keynameprovider->set('pluginconfig.entity_type', 'node')->save();
    }
  }
}
/**
 * Update node type conditions from node_type to entity_bundle.
 * (Adapted from pathauto.install)
 */
function strawberryfield_update_9102() {

  // Refactor the below to target blocks and view that need updating.
  //$pathauto_configs = \Drupal::configFactory()->listAll('pathauto.pattern.');
  //$block_configs = \Drupal::configFactory()->listAll('block.block.');
  //$views_configs = \Drupal::configFactory()->listAll('views.view.');
  //$combined_configs = array_merge($pathauto_configs, $block_configs, $views_configs);
  //// Load all pattern configuration entities.
  //foreach ( $combined_configs as $pattern_config_name) {
  //  $pattern_config = \Drupal::configFactory()->getEditable($pattern_config_name);

  //  // Loop patterns and swap the node_type plugin by the entity_bundle:node
  //  // plugin.
  //  if ($pattern_config->get('type') === 'canonical_entities:node') {
  //    $selection_criteria = $pattern_config->get('selection_criteria');
  //    foreach ($selection_criteria as $uuid => $condition) {
  //      if ($condition['id'] === 'node_type') {
  //        $pattern_config->set("selection_criteria.$uuid.id", 'entity_bundle:node');
  //        $pattern_config->save();
  //        break;
  //      }
  //    }
  //  }
  //}

  // Check and update pathauto
  $selection_criteria = \Drupal::configFactory()->get('pathauto.pattern.digital_object_uuid')->get('selection_criteria');
  if($selection_criteria) {
    $pattern_config = \Drupal::configFactory()->getEditable('pathauto.pattern.digital_object_uuid');
    foreach ($selection_criteria as $uuid => $condition) {
      if ($condition['id'] === 'node_type') {
        $pattern_config->set("selection_criteria.$uuid.id", 'entity_bundle:node');
        $pattern_config->save();
        break;
      }
    }
  }
}
