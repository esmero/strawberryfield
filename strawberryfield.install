<?php
/**
 * @file
 * Contains install and update functions for strawberryfield.
 */

use Drupal\Core\Language\LanguageInterface;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\views\Views;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\Config\StorageInterface;

/**
 * Implements hook_install().
 */

function strawberryfield_install() {
  $vid = "strawberryfield_voc_id";
  $name = "Strawberryfield Metadata Keys";
  $vocabularies = Vocabulary::loadMultiple();
  if (!isset($vocabularies[$vid])) {
    // Create a vocabulary to hold strawberryfield json keys.
    $vocabulary = Vocabulary::create([
      'name' => $name,
      'description' => 'Holds Strawberry Field provided JSON Keys. Populated automatically on node save.',
      'vid' => $vid,
      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
      'weight' => 0,
    ]);
    $vocabulary->save();
    // Add a translatable field to the vocabulary.
    $fieldstorage = FieldStorageConfig::create(array(
      'field_name' => 'field_jsonpath',
      'entity_type' => 'taxonomy_term',
      'type' => 'text',
    ));
    $fieldstorage->save();

    $field = FieldConfig::create(['field_storage' => $fieldstorage, 'bundle' => $vid]);
    $field->save();
  }
}

/**
 * Adds entity_type default to entity reference strawberry keynameprovider.
 */
function strawberryfield_update_9101() {
  $config_factory = \Drupal::configFactory();
  // Find strawberry_keynameprovider configs that are using the entity jmespath
  // provider and have no entity type set yet.
  foreach ($config_factory->listAll('strawberryfield.strawberry_keynameprovider.') as $keynameprovider_name) {
    $keynameprovider = $config_factory->getEditable($keynameprovider_name);
    if ($keynameprovider->get('pluginid') == 'entityjmespath' && $keynameprovider->get('pluginconfig.entity_type') == NULL) {
      $keynameprovider->set('pluginconfig.entity_type', 'node')->save();
    }
  }
}

/**
 * Update node type conditions from node_type to entity_bundle.
 *
 * This hook is only needed if installing from 0 with old 9.2.x configs
 * @see https://www.drupal.org/node/2983299
 *
 * @note (Adapted from pathauto.install)
 */
function strawberryfield_update_9102() {

  $config_factory = \Drupal::configFactory();
  // Check and update pathauto
  $selection_criteria = $config_factory->get('pathauto.pattern.digital_object_uuid')->get('selection_criteria');
  if($selection_criteria) {
    $pattern_config = \Drupal::configFactory()->getEditable('pathauto.pattern.digital_object_uuid');
    foreach ($selection_criteria as $uuid => $condition) {
      if ($condition['id'] === 'node_type') {
        $pattern_config->set("selection_criteria.$uuid.id", 'entity_bundle:node');
        $pattern_config->save();
        break;
      }
    }
  }
  // Check and update blocks
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll('block.block.') as $block_config_name) {
    $block = $config_factory->getEditable($block_config_name);
    if ($block->get('visibility.node_type')) {
      $configuration = $block->get('visibility.node_type');
      $configuration['id'] = 'entity_bundle:node';
      $block->set('visibility.entity_bundle:node', $configuration);
      $block->clear('visibility.node_type');
      $block->save(TRUE);
    }
  }
}

/**
 * Import views for ADO Tools children.
 *
 */
function strawberryfield_update_9103() {
  $view_names = ['ado_tools_children', 'ado_tools_children_creative_work_series'];
  $views_set = true;
  foreach ($view_names as $view_name) {
    $view = Views::getView($view_name);
    if(!isset($view)) {
      $views_set = false;
    }
  }
  if(!$views_set) {
    strawberryfield_update_helper_install_configs();
  }
}

/**
 * Helper function to install all new configs.
 *
 * @param string $directory
 *   The configs directory.
 */
function strawberryfield_update_helper_install_configs($directory = InstallStorage::CONFIG_OPTIONAL_DIRECTORY) {
  /** @var \Drupal\Core\Config\ConfigInstallerInterface $config_installer */
  $config_installer = \Drupal::service('config.installer');
  $config_installer->installDefaultConfig('module', 'strawberryfield');

  $optional_install_path = \Drupal::moduleHandler()
                                  ->getModule('strawberryfield')
                                  ->getPath() . '/' . $directory;
  if (is_dir($optional_install_path)) {
    // Install any optional config the module provides.
    $storage = new FileStorage($optional_install_path, StorageInterface::DEFAULT_COLLECTION);
    $config_installer->installOptionalConfig($storage);
  }
  $restrict_by_dependency = [
    'module' => 'strawberryfield',
  ];
  $config_installer->installOptionalConfig(NULL, $restrict_by_dependency);
}
